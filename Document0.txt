A New Approach in Feature Generation for Time Series Modeling and Forecasting
Anthony Nwachukwu*
*Department of Mathematics, University of Ibadan
	
Abstract
The modeling and forecasting of Time Series has great applications in life events particularly in Stock market prediction. Many mathematical models have been developed as well as Machine learning models. Particularly, Artificial Neural Network (ANN) from Machine learning has been gaining much ground and this requires input features in order to obtain the desired output (predicted values). Over the years, these features have been the data provided by the market industries. The aim of this work is to get the predicted values from mathematical models and use them as input features for the ANN. It was discovered that predicted values from the ANN given these new input features gave a better yield than when learning from the features provided by the market only. 

KEYWORDS: Modeling, Forecasting, Artificial Neural Network, Machine Learning, Feature Generation, Prediction.


Research Methodology
1. Brownian Motion Modelling with Adaptive Parameters
We shall employ Brownian motion process to model the randomness of stock price. A stock price process  is represented by the stochastic differential equation (SDE) as shown below
 
Where the parameters   and   in   are adaptive and are also the rate of return and the volatility, respectively which we will estimate from the data used. The process  in   is a standard Brownian motion. The stochastic differential equation   is driven by the Brownian motion process  
1.1. Parameter Estimation
The data of Google stock indices from 26th June 2006 to 11th June 2018 making it a total of 3011 data samples are used in this paper. The columns consist of Date, High, Low, Close, Adj Close and Volume of the market. The column titled “Close” is the response we seek to model. This data is divided into two sets. Eighty percent of the data was used for the parameter estimation while the remaining 20% was used to select the mu and sigma that produces the least error.
To estimate the rate of return and volatility, the following steps were taken:
 
 
 
 
Where   is the average of  , n is the length of the data under consideration and is given by,
 
The above parameters were computed from the dataset using MATLAB.   and   are generated by computing for 7 days, followed by 8 days, till you get to end of the R.
1.2. Modelling Brownian Motion
In this paper, the Euler discretization method is applied to solve the SDE in . The solution of this SDE is denoted by   and given by the equation below;
 
where     is the time index  ,   is the length of the datasets,   is a sampling time and   and   are estimated in the previous section. The initial value   is the initial stock price in the dataset. The term   is approximated as
 
The random variable   is the standard normally distributed random variable with mean = 0 and variance = 1. The stock prices calculated from   are simulated by the MATLAB program given in appendix 1. These simulated data are compared with the second dataset for model validation. The various   and   from   and   were used for the simulation and the errors were computed using the Mean Square Error Formula given below;
 ,
where n is the number of datasets,   is the empirical price (market price), and   is the model price (simulated price).The stock price predicted with   and associated   that has the least RMS was adopted. The graph of the empirical price and the model price is shown in fig 1. Equations   where all implemented in MATLAB.
 
Fig. 1: Empirical price and the model price

2.  Artificial Neural Network Modeling of Stock Prices
2.1 Overview of ANN
Artificial Neural Network (AAN) is a system inspired by biological concept with several single processing elements known as neurons. There exists an interconnection among the neurons which consists of sets of assigned weights. Each neuron receives signals from outside sources or other neurons and then processes them in activation function to produce its output before sending it to other neurons.
Each input impact is different from other inputs. The ANN under consideration has three layers: input layer, output layer, and hidden layer. Each neuron takes the values of inputs parameters, sums them up according to the weights assigned to them, and adds a bias. By applying the transfer function, the value of the outputs is then determined. The number of neurons in input layer corresponded to the number of input parameters. The architecture of a typical ANN with multilayer is presented in fig 2 below:
 
Fig. 2: ANN Diagram

In mathematical terms, the performance of neuron P can be described as follows:
 
 
Where   are the input parameters;   are the weights assigned to neuron,  ;   is the input combiner;   is the bias;   is the activation function; and  is the output of the neuron.
2.2 Predicting stock price with ANN
In this study, the short-term historical stock prices with the days of the week as inputs were used. The training was done on two sets of inputs. The first input set contains the Open, High, Low, Adj Close and Volume of the market data given. The second set of inputs contains the given market data as in the first with addition to their predicted figures from the Brownian motion model given in . This second set of input sets differentiates this work from the norm. The aim of this work is to compare the results from this second input sets with that of the first.
The mathematical equations governing these processes are given as:
 
 
 
Where   is the stock price at time k using the first set of inputs and   is the stock price at time k using the second set of inputs, n is the number of historical days, and   is the predicted input of   using  .
The data of Google stock indices from 26th June 2006 to 11th June 2018 making it a total of 3011 data samples are used in this paper. The columns consist of Date, High, Low, Close, Adj Close and Volume of the market. The Date column was dropped and the other columns were adopted as the input features except the Close column which is the required Response.  The data was divided into three partitions, the first which consists of 80% of the dataset (i.e. 2409) was used for training the model, 10% (i.e. 301) was used for validation while the raining 10% (i.e. 301) was used as the test set.
MATLAB software R2017a was used for training, validation and testing of this model. The performance of the ANNs was calculated using the mean square error (MSE) of the output. MSE represents the average squared difference between the predicted values and the actual values. MSE was determined using:
 
where   and   are the actual and predicted values respectively and   is the total number of data Used. The network was trained with 10 neurons and a one day delay time series data as shown in the figure below:
 
Fig. 3: ANN Model on where the training was done
Result and Discussion
This section presents the results of the trainings on MATLAB ANN Application.
 
Fig. 4: Plot of ANN with Brownian motion Model as Input Feature and the Actual Data

 
Fig. 5: Plot of ANN without Brownian motion Model as Input Feature and the Actual Data

Table 1: Model Statistics for the Stock Price Prediction
 
	R	MSE	   
	ANN without Brownian Input	ANN with Brownian Input	ANN without Brownian Input	ANN with Brownian Input	   
Train	0.99957	0.99955	56.06	60.37	   
Validation	0.99940	0.99961	76.21	46.33	   
Test	0.99966	0.99969	44.36	42.50	 

From the plots of figure 4 and 5, it is difficult to tell the impact of the Brownian motion and even the errors in the predicted values. The figures in table 1 show these differences. The ANN model without prediction from Brownian motion as input features does better on the training and test sets but poor on the validation set as seen in the values of R and MSE. While the ANN model with prediction from Brownian motion as input features does better on the validation and test sets hence generalizes the model well. Also the performance of the ANN model with prediction from Brownian motion as input features on the validation and test sets is better than the ANN model without Brownian motion hence it gives better predictions on a data set it has not seen before. Also figure 1, 4 and 5 show that ANN performs better than Brownian motion.
	



